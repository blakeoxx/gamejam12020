<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = 0
lastFire = 0    // Last fire time. Used for ammo refreshing
moveRate = 5    // Pixels to move per frame
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement
if (keyboard_check(ord("A"))) { x -= moveRate }
if (keyboard_check(ord("D"))) { x += moveRate }
if (keyboard_check(ord("W"))) { y -= moveRate }
if (keyboard_check(ord("S"))) { y += moveRate }

// Level Wrapping
if (x &lt; 0-sprite_width) { x = room_width+sprite_width }
else if (x &gt; room_width+sprite_width) { x = 0-sprite_width }
if (y &lt; 0-sprite_height) { y = room_height+sprite_height }
else if (y &gt; room_width+sprite_height) { y = 0-sprite_height }

// Obstacle collision checking
while (collision_point(x+0, y+sprite_height/2, obj_obstacle, false, true)) { x += 1 }
while (collision_point(x+sprite_width, y+sprite_height/2, obj_obstacle, false, true)) { x -= 1 }
while (collision_point(x+sprite_width/2, y+0, obj_obstacle, false, true)) { y += 1 }
while (collision_point(x+sprite_width/2, y+sprite_height, obj_obstacle, false, true)) { y -= 1 }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

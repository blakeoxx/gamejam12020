<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastX = x
lastY = y
moveRate = 5    // Pixels to move per frame
invulnTime = 3*1000  // Invulnerability time (milliseconds) after being hit
lastInvuln = 0
canBeSeen = true    // Used for enemy targetting
image_speed = 0.5

lastLives = lives

// Fire/recharge rates for abilities (milliseconds)
fleshyShotRate = 0.5*1000
cyborgShotRate = 0.8*1000
fleshyArmRate = 0.8*1000
cyborgArmRate = 1*1000
fleshyTaserRate = 5*1000
fleshyTaserDuration = 0.2*1000
cyborgTaserRate = 8*1000
cyborgTaserDuration = 0.2*1000
fleshyDefenseRate = 10*1000
fleshyDefenseDuration = 5*1000
cyborgDefenseRate = 3*1000
cyborgDefenseDuration = 1*1000

lastShot = 0
lastArm = 0
lastTaserStart = 0
lastTaserEnd = 0
lastDefenseStart = 0
lastDefenseEnd = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and health

// Movement
if (keyboard_check(ord("A"))) { x -= moveRate }
if (keyboard_check(ord("D"))) { x += moveRate }
if (keyboard_check(ord("W"))) { y -= moveRate }
if (keyboard_check(ord("S"))) { y += moveRate }

// Level Wrapping
if (x &lt; 0-sprite_width) { x = room_width+sprite_width }
else if (x &gt; room_width+sprite_width) { x = 0-sprite_width }
if (y &lt; 0-sprite_height) { y = room_height+sprite_height }
else if (y &gt; room_width+sprite_height) { y = 0-sprite_height }

// Reset enemy targetting after fleshy defense wears off
if (canBeSeen == false &amp;&amp;
    global.inventory.hasDefense &amp;&amp; !global.inventory.hasCyborgDefense &amp;&amp;
    current_time &gt; lastDefenseStart &amp;&amp; current_time &lt;= lastDefenseEnd)
{
    canBeSeen = true
}

// Out of lives?
if (lives &lt;= 0)
{
    audio_play_sound(snd_player_dead,1,0)
    room_goto(rm_gameover)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision checking

// Obstacle collision
while (collision_point(x-sprite_width/2, y, obj_obstacle, false, true)) { x += 1 }
while (collision_point(x+sprite_width/2, y, obj_obstacle, false, true)) { x -= 1 }
while (collision_point(x, y-sprite_height/2, obj_obstacle, false, true)) { y += 1 }
while (collision_point(x, y+sprite_height/2, obj_obstacle, false, true)) { y -= 1 }

// Calculate invulnerability
isInvuln = false
if (lastInvuln + invulnTime &gt;= current_time || 
    (global.inventory.hasCyborgDefense &amp;&amp; current_time &gt; lastDefenseStart &amp;&amp; current_time &lt;= lastDefenseEnd))
{
    isInvuln = true
}

// Enemy collision
collidedEnemy = instance_place(x, y, obj_enemy_parent)
if (!isInvuln &amp;&amp; collidedEnemy != noone)
{
    lives -= 1
    lastInvuln = current_time
    
    // Bounce away
    meX = x
    meY = y
    enemyX = collidedEnemy.x
    enemyY = collidedEnemy.y
    bounceDirection = degtorad(point_direction(enemyX, enemyY, meX, meY))
    xadjust = cos(bounceDirection)
    yadjust = 0 - sin(bounceDirection)
    x += xadjust*32
    y += yadjust*32
}

// Bullet collision
collidedBullet = instance_place(x, y, obj_enemy_bullet)
if (!isInvuln &amp;&amp; collidedBullet != noone)
{
    lives -= 1
    lastInvuln = current_time
}

// Money collision
collidedMoney = instance_place(x, y, obj_money)
if (collidedMoney != noone)
{
    global.inventory.money += 1
    instance_destroy(collidedMoney)
    audio_play_sound(snd_money,1,0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sound if hurt

if (lives &lt; lastLives)
{
    snd = choose(snd_player_hurt1, snd_player_hurt2)
    audio_play_sound(snd,1,0)
}
lastLives = lives
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_money">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// coin pickup
global.inventory.money += 1;
instance_destroy(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use taser

if (global.inventory.hasCyborgTaser &amp;&amp; global.inventory.typeTaser == 1)
{
    if (lastTaserEnd + cyborgTaserRate &gt;= current_time) return 0;
    taser = instance_create(x, y, obj_player_cytaser)
    taser.lifetime = cyborgTaserDuration
    lastTaserStart = current_time
    lastTaserEnd = current_time + cyborgTaserDuration
}
else if (global.inventory.hasTaser &amp;&amp; global.inventory.typeTaser == 0)
{
    if (lastTaserEnd + fleshyTaserRate &gt;= current_time) return 0;
    taser = instance_create(x, y, obj_player_taser)
    taser.lifetime = fleshyTaserDuration
    lastTaserStart = current_time
    lastTaserEnd = current_time + fleshyTaserDuration
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use shield

if (global.inventory.hasCyborgDefense &amp;&amp; global.inventory.typeDefense = 1)
{
    if (lastDefenseEnd + cyborgDefenseRate &gt;= current_time) return 0;
    lastDefenseStart = current_time
    lastDefenseEnd = current_time + cyborgDefenseDuration
}
else if (global.inventory.hasDefense &amp;&amp; global.inventory.typeDefense = 0)
{
    if (lastDefenseEnd + fleshyDefenseRate &gt;= current_time) return 0;
    lastDefenseStart = current_time
    lastDefenseEnd = current_time + fleshyDefenseDuration
    canBeSeen = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use melee

targetDirection = point_direction(x, y, mouse_x, mouse_y)

if (global.inventory.hasCyborgArms &amp;&amp; global.inventory.typeArm == 1)
{
    if (lastArm + cyborgArmRate &gt;= current_time) return 0;
    lastArm = current_time
}
else if (global.inventory.hasArms &amp;&amp; global.inventory.typeArm == 0)
{
    if (lastArm + fleshyArmRate &gt;= current_time) return 0;
    lastArm = current_time
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot bullet

targetDirection = point_direction(x, y, mouse_x, mouse_y)

if (global.inventory.hasCyborgShots &amp;&amp; global.inventory.typeShot == 1)
{
    if (lastShot + cyborgShotRate &gt;= current_time) return 0;
    laser = instance_create(x, y, obj_player_laser)
    laser.direction = targetDirection
    lastShot = current_time
}
else if (global.inventory.hasShots &amp;&amp; global.inventory.typeShot == 0)
{
    if (lastShot + fleshyShotRate &gt;= current_time) return 0;
    bullet = instance_create(x, y, obj_player_bullet)
    bullet.direction = targetDirection
    lastShot = current_time
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw character sprite

flipSprite = false
if (current_time &gt; lastDefenseStart &amp;&amp; current_time &lt;= lastDefenseEnd)
{
    if (global.inventory.hasCyborgDefense) sprite_index = spr_player_cyarmor
    else sprite_index = spr_player_armor
}
else if (x == lastX &amp;&amp; y == lastY) sprite_index = spr_player_idle
else if (x &gt; lastX) // Left
{
    sprite_index = spr_player_side
}
else if (x &lt; lastX) // Right
{
    sprite_index = spr_player_side
    flipSprite = true
}
else if (y &gt; lastY) sprite_index = spr_player_down
else if (y &lt; lastY) sprite_index = spr_player_up

image_alpha = 1
if (lastInvuln + invulnTime &gt;= current_time) image_alpha = 0.5

lastX = x
lastY = y
if (flipSprite) image_xscale = -1
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, 0, c_white, image_alpha)
image_xscale = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

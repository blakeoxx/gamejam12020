<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables
gridSize = 30
gridType = ds_grid_create(gridSize, gridSize);
gridTypeOld = ds_grid_create(gridSize, gridSize);
gridTile = ds_grid_create(gridSize, gridSize);
tileset = bk_environment
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// level creation
// gridType[# x, y]
timer = current_time;
color0 = c_blue;
color1 = c_green;

show_debug_message("Variables initialised in " + string((current_time - timer)/1000) + "s");
timer = current_time;

// initPos()
randomize();
for (var Y = 0; Y &lt; gridSize; Y++) {
    for (var X = 0; X &lt; gridSize; X++) {
        if (irandom(100) &lt; global.iniChance) {
            gridType[# X, Y] = 1;
        } else {
            gridType[# X, Y] = 0;
        }
    }
}

show_debug_message("Initial positions seeded in " + string((current_time - timer)/1000) + "s");
timer = current_time;

// genTilePos()
for (var i = 0; i &lt; global.numRun; i++) {
    ds_grid_copy(gridTypeOld, gridType);
    
    for (var Y = 0; Y &lt; gridSize; Y++) {
        for (var X = 0; X &lt; gridSize; X++) {
            var neighb = 0;
            for (var bY = -1; bY &lt; 2; bY++) {
                for (var bX = -1; bX &lt; 2; bX++) {
                    if (bX == 0 &amp;&amp; bY == 0) { continue; }
                    if ((X+bX) &gt;= 0 &amp;&amp; (X+bX) &lt; gridSize &amp;&amp; (Y+bY) &gt;= 0 &amp;&amp; (Y+bY) &lt; gridSize) {
                        neighb += gridTypeOld[# X+bX, Y+bY];
                    } else {
                        neighb++;
                    }
                }
            }
            if (gridTypeOld[# X, Y] == 1) {
                if (neighb &lt; global.deathLimit) {
                    gridType[# X, Y] = 0;
                } else {
                    gridType[# X, Y] = 1;
                }
            }
            
            if (gridTypeOld[# X, Y] == 0) {
                if (neighb &gt; global.birthLimit) {
                    gridType[# X, Y] = 1;
                } else {
                    gridType[# X, Y] = 0;
                }
            }
        }
    }
}

// give player a safe starting position


show_debug_message("Tile positions updated " + string(global.numRun) + " times in " + string((current_time - timer)/1000) + "s");
timer = current_time;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// surface
update = true;
surface = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// inventory manager check
if (instance_number(obj_player_inventory) == 0) instance_create(0, 0, obj_player_inventory)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy grids
ds_grid_destroy(gridType);
ds_grid_destroy(gridTypeOld);
ds_grid_destroy(gridTile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debugging
draw_text(10, 620, "difficulty: " + string(global.difficulty));
draw_text(10, 600, "wave: " + string(global.wave));
draw_text(10, 580, "tileSize: " + string(global.tileSize));
draw_text(10, 560, "numRun: " + string(global.numRun));
draw_text(10, 540, "deathLimit: " + string(global.deathLimit));
draw_text(10, 520, "birthLimit: " + string(global.birthLimit));
draw_text(10, 500, "iniChance: " + string(global.iniChance));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawing on surface
if (update) {
    if (!surface_exists(surface)) {
        surface = surface_create(room_width, room_height);
    }
    
    surface_set_target(surface);
    for (var Y = 0; Y &lt; gridSize; Y++) {
        for (var X = 0; X &lt; gridSize; X++) {
            var posX = X * global.tileSize;
            var posY = Y * global.tileSize;
            
            if (gridType[# X, Y] == 1) {
                draw_rectangle_colour(posX, posY, posX+(global.tileSize-1), posY+(global.tileSize-1), color1, color1, color1, color1, false);
            }
            
            if (gridType[# X, Y] == 0) {
                draw_rectangle_colour(posX, posY, posX+(global.tileSize-1), posY+(global.tileSize-1), color0, color0, color0, color0, false);
            }
        }
    }
    update = false;
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawing the surface
if (surface_exists(surface)) {
    draw_surface(surface, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quick restart thanks bro
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// advance wave
global.wave += 1;
if (global.wave % 5 == 0) {
    global.difficulty += 1;
}
room_goto(rm_level)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

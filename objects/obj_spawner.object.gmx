<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables
// enemy odds
fishChance = 70;
lobsterChance = 15;
squidChance = 10;
bombChance = 5;

// enemy weight
fishWeight = 5;
lobsterWeight = 20;
squidWeight = 30;
bombWeight = 40;

// enemy timers
fishTimer = 0.5;
lobsterTimer = 2;
squidtimer = 3
bombTimer = 3;

// misc
spawning = true;
weight = 0;
weightLimit = 100;
alarm[0] = room_speed * 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn wave
var fish = 0;
var lobster = 0;
var squid = 0;
var bomb = 0;

// see spawns
while (spawning) {
    var rng = irandom(100);
    if (rng &lt;= fishChance) {
        // fish spawn
        fish++;
        weight += fishWeight;
    } else if (
        rng &gt; fishChance &amp;&amp;
        rng &lt;= fishChance + lobsterChance) {
        // lobster spawn
        lobster++;
        lobster += lobsterWeight;
    } else if (
        rng &gt; fishChance + lobsterChance &amp;&amp;
        rng &lt;= fishChance + lobsterChance + squidChance) {
        // squid spawn
        squid++;
        squid += squidWeight;
    } else {
        // bomb spawn
        bomb++;
    }
    
    // check if point limit achieved
    if (weight &gt; weightLimit - fishWeight) {
        spawning = false;
    }
}

// spawn the right amount
var top = -64;
var right = room_width + 64;
var bot = room_height + 64;
var left = -64;
for (var i = 0; i &lt; fish; i++) {
    var loc = choose("T", "R", "B", "L");
    switch (loc) {
        case ("T"): instance_create(irandom(room_width), top, obj_enemy_fish); break;
        case ("R"): instance_create(right, irandom(room_height), obj_enemy_fish); break;
        case ("B"): instance_create(irandom(room_width), bot, obj_enemy_fish); break;
        case ("L"): instance_create(left, irandom(room_height), obj_enemy_fish); break;
    }
}

for (var i = 0; i &lt; lobster; i++) {
    var loc = choose("T", "R", "B", "L");
    switch (loc) {
        case ("T"): instance_create(irandom(room_width), top, obj_enemy_lobster); break;
        case ("R"): instance_create(right, irandom(room_height), obj_enemy_fish); break;
        case ("B"): instance_create(irandom(room_width), bot, obj_enemy_fish); break;
        case ("L"): instance_create(left, irandom(room_height), obj_enemy_fish); break;
    }
}

for (var i = 0; i &lt; squid; i++) {
    var loc = choose("T", "R", "B", "L");
    switch (loc) {
        case ("T"): instance_create(irandom(room_width), top, obj_enemy_fish); break;
        case ("R"): instance_create(right, irandom(room_height), obj_enemy_fish); break;
        case ("B"): instance_create(irandom(room_width), bot, obj_enemy_fish); break;
        case ("L"): instance_create(left, irandom(room_height), obj_enemy_fish); break;
    }
}

for (var i = 0; i &lt; bomb; i++) {
    var loc = choose("T", "R", "B", "L");
    switch (loc) {
        case ("T"): instance_create(irandom(room_width), top, obj_enemy_fish); break;
        case ("R"): instance_create(right, irandom(room_height), obj_enemy_fish); break;
        case ("B"): instance_create(irandom(room_width), bot, obj_enemy_fish); break;
        case ("L"): instance_create(left, irandom(room_height), obj_enemy_fish); break;
    }
}

// reset timer
var newTimer = 0;
newTimer += fish * fishTimer;
newTimer += lobster * lobsterTimer;
newTimer += squid * squidTimer;
newTimer += bomb * bombTimer;

alarm[0] = newTimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end wave
// win condition, amount of points scored?
if (false) {
    // stop spawner
    alarm[0] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

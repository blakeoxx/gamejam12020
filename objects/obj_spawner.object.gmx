<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables
// enemy odds
fishChance = max(60, 100 - global.wave);
lobsterChance = min(20, 0 + global.wave / 2);
squidChance = min(10, 0 + global.wave / 4);
bombChance = min(10, 0 + global.wave / 4);

// enemy weight
fishWeight = 10;
lobsterWeight = 20;
squidWeight = 35;
bombWeight = 35;

// enemy timers
fishTimer = 3;
lobsterTimer = 5;
squidTimer = 10;
bombTimer = 10;

// misc
scoreLimit = 1000 * global.wave; //perhaps clamp
spawning = true;
//weight = 0;
weightLimit = 50 * global.difficulty;
alarm[0] = room_speed * 2; //starting delay


//oh god
weightChange = 0;
weightGoal = 100 + (global.wave*13); //kill this much in weight to stop spawning
winDelay = 60;
win = 0;
enemyCount = 69;

// if boss wave
/*
if (global.wave % 5 == 0) {
    instance_create(room_width / 2, 0, obj_boss1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn wave
var fish = 0;
var lobster = 0;
var squid = 0;
var bomb = 0;

var weight = 0;
weight += instance_number(obj_enemy_fish) * fishWeight;
weight += instance_number(obj_enemy_lobster) * lobsterWeight;
weight += instance_number(obj_enemy_squid) * squidWeight;
weight += instance_number(obj_enemy_bomb) * bombWeight;

// see spawns
while (spawning) {
    // check if point limit achieved
    if (weight &gt; weightLimit - fishWeight) {
        spawning = false;
        break;
    }
    
    var rng = irandom(100);
    if (rng &lt;= bombChance &amp;&amp; weight + bombWeight &lt;= 100) {
        // bomb spawn
        bomb++;
        weight += bombWeight;
    } else if (rng &gt; bombChance &amp;&amp; rng &lt;= bombChance + squidChance &amp;&amp; weight + squidWeight &lt;= 100) {
        // squid spawn
        squid++;
        weight += squidWeight;
    } else if (rng &gt; bombChance + squidChance &amp;&amp; rng &lt;= bombChance + squidChance + lobsterChance &amp;&amp; weight + lobsterWeight &lt;= 100) {
        // lobster spawn
        lobster++;
        weight += lobsterWeight;
    } else {
        // fish spawn
        fish++;
        weight += fishWeight;
    }
}

// spawn the right amount
scr_spawnEnemies(fish, obj_enemy_fish, fishWeight);
scr_spawnEnemies(lobster, obj_enemy_lobster, lobsterWeight);
scr_spawnEnemies(squid, obj_enemy_squid, squidWeight);
scr_spawnEnemies(bomb, obj_enemy_bomb, bombWeight);

// reset timer
var newTimer = 0;
newTimer += instance_number(obj_enemy_fish) * fishTimer;
newTimer += instance_number(obj_enemy_lobster) * lobsterTimer;
newTimer += instance_number(obj_enemy_squid) * squidTimer;
newTimer += instance_number(obj_enemy_bomb) * bombTimer;

spawning = true;
alarm[0] = newTimer * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reduce time if no enemies
enemyCount = (instance_number(obj_enemy_fish)+instance_number(obj_enemy_squid)+instance_number(obj_enemy_bomb)+instance_number(obj_enemy_lobster)+instance_number(obj_money));
if (alarm[0] &gt; 60)
    {
    if (enemyCount &lt;= 1)
        {
        alarm[0] = 60;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end wave
if (weightChange &gt;= weightGoal)
    {
    alarm[0] = -1; //stop spawning
    if (enemyCount == 0)
        {
        win++;
        if (win &gt;= winDelay)
            {
            instance_destroy(instance_find(obj_levelController, 0));
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
